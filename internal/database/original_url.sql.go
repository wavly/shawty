// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: original_url.sql

package database

import (
	"context"
	"database/sql"
)

const createShortLink = `-- name: CreateShortLink :one
INSERT INTO urls (
  original_url,
  code
) VALUES ( ?, ? )
RETURNING id, original_url, code, created_at, accessed_count, last_accessed
`

type CreateShortLinkParams struct {
	OriginalUrl string
	Code        string
}

func (q *Queries) CreateShortLink(ctx context.Context, arg CreateShortLinkParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createShortLink, arg.OriginalUrl, arg.Code)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Code,
		&i.CreatedAt,
		&i.AccessedCount,
		&i.LastAccessed,
	)
	return i, err
}

const deleteLinkTime = `-- name: DeleteLinkTime :exec
DELETE FROM urls
  WHERE last_accessed = ?
`

func (q *Queries) DeleteLinkTime(ctx context.Context, lastAccessed sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteLinkTime, lastAccessed)
	return err
}

const getCode = `-- name: GetCode :one
SELECT code FROM urls WHERE code = ?
`

func (q *Queries) GetCode(ctx context.Context, code string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCode, code)
	err := row.Scan(&code)
	return code, err
}

const getLastAccessedTime = `-- name: GetLastAccessedTime :many
SELECT last_accessed, original_url FROM urls
`

type GetLastAccessedTimeRow struct {
	LastAccessed sql.NullTime
	OriginalUrl  string
}

func (q *Queries) GetLastAccessedTime(ctx context.Context) ([]GetLastAccessedTimeRow, error) {
	rows, err := q.db.QueryContext(ctx, getLastAccessedTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastAccessedTimeRow
	for rows.Next() {
		var i GetLastAccessedTimeRow
		if err := rows.Scan(&i.LastAccessed, &i.OriginalUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOriginalUrl = `-- name: GetOriginalUrl :one
SELECT original_url FROM urls where code = ?
`

func (q *Queries) GetOriginalUrl(ctx context.Context, code string) (string, error) {
	row := q.db.QueryRowContext(ctx, getOriginalUrl, code)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getShortCodeInfo = `-- name: GetShortCodeInfo :one
SELECT accessed_count, original_url, last_accessed FROM urls WHERE code = ?
`

type GetShortCodeInfoRow struct {
	AccessedCount int64
	OriginalUrl   string
	LastAccessed  sql.NullTime
}

func (q *Queries) GetShortCodeInfo(ctx context.Context, code string) (GetShortCodeInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getShortCodeInfo, code)
	var i GetShortCodeInfoRow
	err := row.Scan(&i.AccessedCount, &i.OriginalUrl, &i.LastAccessed)
	return i, err
}

const updateAccessedAndLastCount = `-- name: UpdateAccessedAndLastCount :exec
UPDATE urls SET accessed_count = accessed_count + 1, last_accessed = ? WHERE code = ?
`

type UpdateAccessedAndLastCountParams struct {
	LastAccessed sql.NullTime
	Code         string
}

func (q *Queries) UpdateAccessedAndLastCount(ctx context.Context, arg UpdateAccessedAndLastCountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccessedAndLastCount, arg.LastAccessed, arg.Code)
	return err
}
